//always @ (posedge clk) 
//begin
//	test <= 2'b00;
//	prev_addr_a <= addr_a;
//	case(ready_state)
//	1'b1:
//	begin
//		prev_addr_a <= addr_a;
//		test <= 2'b00;
//		d_ready <= 1'b0;
//		ready_state <= 1'b0;
//	end
//	
//	1'b0:
//	begin
//		prev_addr_a <= addr_a;
//		test <=2'b10;
//		if (addr_a == prev_addr_a + 19'd1)
//		begin
//			
//			d_ready <= 1'b1;
//			ready_state <= 1'b1;
//		end
//		else
//		test <=2'b11;
//		strt_count <= 1'b0;
//		case(strt_count)//
//		1'b0:
//		begin
//			strt_count <= 1'b1;
//		end
//		//************* counter
//		//if (strt_count == 1'b1)
//		1'b1:
//		begin
//			
//			//delay_temp <= delay_temp + 8'b1;
//			//if (DELAY == delay_temp)
//			if (delay_temp == DELAY)
//			begin
//				delay_temp <= 8'b0;
//				strt_count <= 1'b0;
//				d_ready <= 1'b1;
//				ready_state <= 1'b1;
//			end
//			else 
//			
//			delay_temp <= delay_temp + 8'd1;
//		end
//		endcase
//	end
//	endcase
//end
//	
//	
//	always @(posedge clk)
//	begin
//		if (we_a) 
//			begin
//				ram[addr_a] <= data_a;
//				q_a <= data_a;
//				//q_a <= ram[addr_a];
//			end
//		else 
//			begin
//				q_a <= ram[addr_a];
//			end 
//	end
//	 
//
//	// Port B 
//	always @ (posedge clk)
//	begin
//		if (we_b) 
//		begin
//			ram[addr_b] <= data_b;
//			q_b <= data_b;
//		end
//		else 
//		begin
//			q_b <= ram[addr_b];
//		end 
//	end
//	
//endmodule